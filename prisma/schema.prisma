generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model admin {
  id        Int      @id @default(autoincrement())
  email     String   @unique(map: "admin_email") @db.VarChar(100)
  password  String   @db.VarChar(255)
  timestamp DateTime @default(now()) @db.Timestamp(0)
}

model matches {
  id                         Int      @id @default(autoincrement())
  user1Id                    Int
  user2Id                    Int
  isMutual                   Boolean? @default(false)
  timestamp                  DateTime @default(now()) @db.Timestamp(0)
  user_matches_user1IdTouser user     @relation("matches_user1IdTouser", fields: [user1Id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "matches_ibfk_1")
  user_matches_user2IdTouser user     @relation("matches_user2IdTouser", fields: [user2Id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "matches_ibfk_2")

  @@index([user1Id], map: "user1Id")
  @@index([user2Id], map: "user2Id")
}

model message {
  id                            Int      @id @default(autoincrement())
  senderId                      Int
  receiverId                    Int
  content                       String   @db.Text
  createdAt                     DateTime @default(now()) @db.DateTime(0)
  user_message_senderIdTouser   user     @relation("message_senderIdTouser", fields: [senderId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "message_ibfk_1")
  user_message_receiverIdTouser user     @relation("message_receiverIdTouser", fields: [receiverId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "message_ibfk_2")

  @@index([receiverId], map: "receiverId")
  @@index([senderId], map: "senderId")
}

model user {
  id                               Int                  @id @default(autoincrement())
  username                         String               @db.VarChar(100)
  email                            String               @unique(map: "email") @db.VarChar(100)
  password                         String               @db.VarChar(255)
  bio                              String?              @db.Text
  birth                            DateTime?            @db.Date
  gender                           String?              @db.VarChar(10)
  location                         String?              @db.VarChar(100)
  interests                        Json?                
  profilePicture                   String?              @db.Text
  profilePictures                  String?              @db.LongText
  verified                         Boolean?             @default(false)
  isPremium                        Boolean?             @default(false)
  block_block_blockedIdTouser      block[]              @relation("block_blockedIdTouser")
  block_block_blockerIdTouser      block[]              @relation("block_blockerIdTouser")
  matches_matches_user1IdTouser    matches[]            @relation("matches_user1IdTouser")
  matches_matches_user2IdTouser    matches[]            @relation("matches_user2IdTouser")
  message_message_senderIdTouser   message[]            @relation("message_senderIdTouser")
  message_message_receiverIdTouser message[]            @relation("message_receiverIdTouser")
  passwordresettoken               passwordresettoken[]
  userpreferences                  userpreferences?
  verificationtoken                verificationtoken[]
}

model userpreferences {
  id                 Int     @id @default(autoincrement())
  userId             Int?    @unique(map: "userId")
  preferredGender    String? @db.VarChar(10)
  preferredLocation  String? @db.VarChar(100)
  minAge             Int?
  maxAge             Int?
  preferredInterests String? @db.Text
  user               user?   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "userpreferences_ibfk_1")
}

model verificationtoken {
  id        Int       @id @default(autoincrement())
  token     String    @unique(map: "token") @db.VarChar(255)
  userId    Int
  createdAt DateTime? @default(now()) @db.DateTime(0)
  expiresAt DateTime  @db.DateTime(0)
  user      user      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "verificationtoken_ibfk_1")

  @@index([userId], map: "userId")
}

model block {
  id                         Int       @id @default(autoincrement())
  blockerId                  Int
  blockedId                  Int
  createdAt                  DateTime? @default(now()) @db.DateTime(0)
  user_block_blockedIdTouser user      @relation("block_blockedIdTouser", fields: [blockedId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "fk_block_blocked")
  user_block_blockerIdTouser user      @relation("block_blockerIdTouser", fields: [blockerId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "fk_block_blocker")

  @@unique([blockerId, blockedId], map: "unique_block_pair")
  @@index([blockedId], map: "fk_block_blocked")
}

model passwordresettoken {
  id        Int       @id @default(autoincrement())
  userId    Int
  token     String    @unique(map: "token") @db.VarChar(255)
  expiresAt DateTime  @db.DateTime(0)
  createdAt DateTime? @default(now()) @db.DateTime(0)
  user      user      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "passwordresettoken_ibfk_1")

  @@index([userId], map: "userId")
}
